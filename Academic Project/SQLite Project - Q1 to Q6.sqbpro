Q1 >-- Display the products based on their criteria

SELECT 
	PRODUCT_CLASS_CODE,
	PRODUCT_ID,
	PRODUCT_DESC,
	PRODUCT_PRICE,
	CASE
		WHEN PRODUCT_CLASS_CODE = 2050 THEN PRODUCT_PRICE + 2000
		WHEN PRODUCT_CLASS_CODE = 2051 THEN PRODUCT_PRICE + 500
		WHEN PRODUCT_CLASS_CODE = 2052 THEN PRODUCT_PRICE + 600
		ELSE PRODUCT_PRICE
	END AS 'Updated Price'
FROM PRODUCT
ORDER BY PRODUCT_CLASS_CODE DESC

Q2 >-- Inventory status of products as per their available quantity

SELECT
	P.PRODUCT_ID,
	PC.PRODUCT_CLASS_CODE,
	PC.PRODUCT_CLASS_DESC,
	P.PRODUCT_QUANTITY_AVAIL,
	CASE 
		WHEN PC.PRODUCT_CLASS_CODE IN(2050,2053) THEN 
			CASE
				WHEN P.PRODUCT_QUANTITY_AVAIL = 0 THEN 'Out of Stock'
				WHEN P.PRODUCT_QUANTITY_AVAIL &lt;= 10 THEN 'Low Stock'
				WHEN (P.PRODUCT_QUANTITY_AVAIL &gt;= 11 AND P.PRODUCT_QUANTITY_AVAIL &lt;= 30) THEN 'In Stock'
				WHEN P.PRODUCT_QUANTITY_AVAIL &gt;= 31 THEN 'Enough Stock'
			END	
		WHEN PC.PRODUCT_CLASS_CODE IN (2052,2056) THEN
			CASE
				WHEN P.PRODUCT_QUANTITY_AVAIL = 0 THEN 'Out of Stock'
				WHEN P.PRODUCT_QUANTITY_AVAIL &lt;= 20 THEN 'Low Stock'
				WHEN (P.PRODUCT_QUANTITY_AVAIL &gt;= 21 AND P.PRODUCT_QUANTITY_AVAIL &lt;= 80) THEN 'In Stock'
				WHEN P.PRODUCT_QUANTITY_AVAIL &gt;= 81 THEN 'Enough Stock'	
			END 
		ELSE
			CASE
				WHEN P.PRODUCT_QUANTITY_AVAIL = 0 THEN 'Out of Stock'
				WHEN P.PRODUCT_QUANTITY_AVAIL &lt;= 15 THEN 'Low Stock'
				WHEN (P.PRODUCT_QUANTITY_AVAIL &gt;= 16 AND P.PRODUCT_QUANTITY_AVAIL &lt;= 50) THEN 'In Stock'
				WHEN P.PRODUCT_QUANTITY_AVAIL &gt;= 51 THEN 'Enough Stock'
			END
		END AS 'Inventory Status' 
FROM PRODUCT AS P
JOIN PRODUCT_CLASS AS PC ON PC.PRODUCT_CLASS_CODE = P.PRODUCT_CLASS_CODE
ORDER BY PC.PRODUCT_CLASS_CODE ASC

Q3 >-- Count of cities (more than 1) in all countries other than USA and Malaysia

SELECT COUNTRY, count(CITY) AS City_Count
FROM ADDRESS
WHERE COUNTRY NOT IN ('USA','Malaysia')
GROUP BY COUNTRY
HAVING City_Count &gt; 1
ORDER BY City_Count DESC;

Q4 >-- Orders shipped to cities whose pin codes do not have any 0s in them

SELECT 
	OC.CUSTOMER_ID,
	OC.CUSTOMER_FNAME || ' ' || OC.CUSTOMER_LNAME AS CUSTOMER_FULL_NAME,
	AD.CITY,
	AD.PINCODE,
	OH.ORDER_ID,
	OH.ORDER_DATE,
	P.PRODUCT_DESC,
	OI.PRODUCT_QUANTITY * P.PRODUCT_PRICE AS SUBTOTAL
FROM	ONLINE_CUSTOMER AS OC
JOIN ORDER_HEADER AS OH ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
JOIN ADDRESS AS AD ON AD.ADDRESS_ID = OC.ADDRESS_ID
JOIN ORDER_ITEMS AS OI ON OI.ORDER_ID = OH.ORDER_ID
JOIN PRODUCT AS P ON OI.PRODUCT_ID = P.PRODUCT_ID
WHERE OH.ORDER_STATUS = 'Shipped' AND AD.PINCODE NOT IN
	(SELECT AD.PINCODE
	 FROM ADDRESS AS AD
       	 WHERE AD.PINCODE LIKE ('%0%'))
ORDER BY CUSTOMER_FULL_NAME, ORDER_DATE, SUBTOTAL ASC;

Q5 >--  Item which has been bought maximum no. of times (Quantity Wise) along with product id 201.

SELECT
	OI.PRODUCT_ID,
	P.PRODUCT_DESC,
	sum(OI.PRODUCT_QUANTITY) AS TOTAL_QUANTITY	
FROM PRODUCT AS P
JOIN ORDER_ITEMS AS OI ON OI.PRODUCT_ID = P.PRODUCT_ID	
WHERE ORDER_ID IN
	(SELECT ORDER_ID
	 FROM ORDER_ITEMS 
	 WHERE PRODUCT_ID = 201) AND OI.PRODUCT_ID &lt;&gt; 201
GROUP BY OI.PRODUCT_ID
ORDER BY TOTAL_QUANTITY DESC
LIMIT 1

Q6 >-- All customers even if they have not ordered any item

SELECT
	OH.CUSTOMER_ID,
	OC.CUSTOMER_FNAME || ' ' || OC.CUSTOMER_LNAME AS CUSTOMER_FULL_NAME,
	OC.CUSTOMER_EMAIL,
	OI.ORDER_ID,
	P.PRODUCT_DESC,
	OI.PRODUCT_QUANTITY,
	OI.PRODUCT_QUANTITY * P.PRODUCT_PRICE AS SUBTOTAL
FROM	ONLINE_CUSTOMER AS OC
LEFT JOIN ORDER_HEADER AS OH ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
LEFT JOIN ORDER_ITEMS AS OI ON OI.ORDER_ID = OH.ORDER_ID
LEFT JOIN PRODUCT AS P ON P.PRODUCT_ID = OI.PRODUCT_ID;
